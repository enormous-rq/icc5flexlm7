<HTML>

<HEAD>

   <TITLE>siulflex.htm: Linux advanced cracking: flexlm</TITLE>

</HEAD>

<BODY TEXT="#001010" BGCOLOR="#C0C0C0" VLINK="#405040">



<TABLE BORDER=1 CELLSPACING=2 WIDTH="100%" HEIGHT="22" >

<TR>

<TD></TD>



<TD>

<CENTER><P><!-- Choose  a TITLE probably wont be changed --><FONT

SIZE=+2>Flexlm,

the Flexible lies manager.<BR>

</FONT>XprismPro 1.0</P></CENTER>

</TD>



<TD>

<CENTER><P><!-- Choose  a PROJECT GIF may be changed --><A

HREF="ourtools.htm" tppabs="http://www.anticrack.de/fravia/ourtools.htm"><IMG SRC="ourtools.gif" tppabs="http://www.anticrack.de/fravia/ourtools.gif" ALT="our tools"

BORDER=0 HEIGHT=43 WIDTH=114 ALIGN=CENTER></A>

<BR>

<FONT COLOR="#808080">Our tools</FONT> </P></CENTER>

</TD>

</TR>



<TR>

<TD bgcolor="#FFFFEA">

<CENTER><P><FONT COLOR="#890000">06 September 1998 </FONT></P></CENTER>

</TD>



<TD bgcolor="#FFFFEA">

<CENTER><P>by SiuL+Hacky </P></CENTER>

</TD>



<TD valign="center" bgcolor="#FFFFEA"><A HREF="hcu98_3.htm" tppabs="http://www.anticrack.de/fravia/hcu98_3.htm"><IMG

SRC="hcu1.gif" tppabs="http://www.anticrack.de/fravia/hcu1.gif" ALT="+cracker" BORDER=0 HEIGHT=43 WIDTH=114

ALIGN=BOTTOM></A></TD>

</TR>



<TR>

<TD>

<CENTER><P><A HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html"><IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" BORDER=0

HEIGHT=13 WIDTH=13 ALIGN=BOTTOM></A></P></CENTER>

</TD>



<TD bgcolor="898030">

<CENTER><P>Courtesy of Fravia's page of reverse engineering

</P></CENTER>

</TD>



<TD bgcolor="898030"></TD>

</TR>



<TR>

<TD></TD>



<TD>

<CENTER><P><I>Well, well, well... while some of us have been sleeping in

the sun, other (more serious) crackers have worked a lot. SiuL+Hacky's

Linux essays are legendary, and here you have another VERY interesting

paper. Since everyone and his dog is now switching to Linux (and the

megaflop

of Windows'98 contributes to this... man, anyone that went trough the

ordeal

of upgrading that idiotical Windoze's OS will switch to Linux, I

believe)

these essays are more and more important. Actually, d'you want an

advice?

Throw your windoze away, start working (was about time) as you should in

Linux and start cracking the hell out of it following Siul+Hacky's

steps!<BR>

Enjoy this great work, but be warned: this stuff is not for beginners,

not at all.</I></P></CENTER>

</TD>



<TD>

<CENTER><P><A HREF="advanced.htm" tppabs="http://www.anticrack.de/fravia/advanced.htm"><IMG SRC="advanced.gif" tppabs="http://www.anticrack.de/fravia/advanced.gif" 

ALT="advanced" BORDER=0 HEIGHT=43 WIDTH=114 ALIGN=CENTER></A>

<BR>

<FONT COLOR="#808080">Advanced</FONT> </P></CENTER>

</TD>

</TR>



<TR>

<TD></TD>



<TD bgcolor="898030">

<CENTER><P><B>There is a crack, a crack in everything That's how the

light

gets in</B> </P></CENTER>

</TD>



<TD></TD>

</TR>



<TR>

<TD valign="MIDDLE" bgcolor="#C6E7C6">

<CENTER><P><FONT COLOR="#0000FF">Rating</FONT> </P></CENTER>

</TD>



<TD valign="MIDDLE" bgcolor="#C6E7C6">

<CENTER><P><!-- CHOOSE A RATING (may be changed) --><FONT

COLOR="#0000FF">()<B>Beginner</B>

()<B>Intermediate</B> ( )<B>Advanced</B> ( )<B>Expert</B></FONT>

</P></CENTER>

</TD>



<TD></TD>

</TR>

</TABLE>



<P><!-- CORPUS  --></P>



<P><BR>

<!-- CHOOSE A COMMENT (may be changed)  --></P>



<P>

<HR><!-- CHOOSE A TITLE (wont proabbly be changed) --></P>



<CENTER><P><FONT SIZE=+3>Flexlm: The Flexible lies manager.<BR>

</FONT><FONT SIZE=+2>XprismPro 1.0 <BR>

<!-- REPEAT YOUR CHOSEN HANDLE HERE --></FONT><FONT

COLOR="#0B7FC1">Written

by SiuL+Hacky </FONT><!-- INTRODUCTION STARTS HERE --><BR>

</P></CENTER>



<TABLE BORDER=1 CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD bgcolor="#C6E7C6">

<CENTER><P><FONT COLOR="#0000FF"><FONT

SIZE=+2>Introduction</FONT></FONT><BR>

</P></CENTER>

</TD>

</TR>

</TABLE>



<P>One of the most popular commercial schemes in the unix worl is

Flexlm.

It has been working for several years in the market, but I've never seen

attempts to break it, probably, because it was not so popular in the

win-world,

and anyway it is not practically used in a shareware basis. It's used

with

huge software package that has more to do with warez. If you succede in

grasping the idea of FlexLM, you'll see that it may try to stop making

(ilegal) copies of legal software. It fails.</P>



<TABLE BORDER=1 CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD bgcolor="#C6E7C6">

<CENTER><P><FONT COLOR="#0000FF"><FONT SIZE=+2>Tools

required</FONT></FONT><BR>

</P></CENTER>

</TD>

</TR>

</TABLE>



<P><!-- PASTE HERE YOUR REQUIRED TOOLS --></P>



<TABLE BORDER=1 WIDTH="100%" >

<TR>

<TD width="40%"><FONT COLOR="#0000FF">Ltrace </FONT></TD>



<TD width="60%">search for ltrace_0.3.2.tar.gz</TD>

</TR>



<TR>

<TD width="40%"><FONT COLOR="#0000FF">Dasm</FONT></TD>



<TD width="60%"><A HREF="#DASM">Here !</A> </TD>

</TR>



<TR>

<TD width="40%"><FONT COLOR="#0000FF">perl interpreter</FONT></TD>



<TD width="60%">( available in linux distributions)</TD>

</TR>



<TR>

<TD width="40%"><FONT COLOR="#0000FF">gcc</FONT></TD>



<TD width="60%">(the same apply)</TD>

</TR>



<TR>

<TD width="40%"><FONT COLOR="#0000FF">Flexlm programer's

kit:</FONT></TD>



<TD width="60%"><A HREF="javascript:if(confirm('http://www.flexlm.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.flexlm.com/'" tppabs="http://www.flexlm.com/">http://www.flexlm.com</A></TD></TR>



<TR>

<TD width="40%"><FONT COLOR="#0000FF">DDD</FONT></TD>



<TD width="60%"><A

HREF="javascript:if(confirm('http://www.cs.tu-bs.de/softech/ddd/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.cs.tu-bs.de/softech/ddd/'" tppabs="http://www.cs.tu-bs.de/softech/ddd/">http://www.cs.tu-bs.de/softech/ddd</A>

</TD>

</TR>

</TABLE>



<TABLE BORDER=1 CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD bgcolor="#C6E7C6">

<CENTER><P><FONT COLOR="#0000FF"><FONT SIZE=+2>Target's

URL/FTP</FONT></FONT><BR>

</P></CENTER>

</TD>

</TR>

</TABLE>



<P><!-- DON'T FORGET TO PASTE HERE ALSO THE URL/FTP OF YOUR TARGET

                 --></P>



<P>XprismPro: <A HREF="javascript:if(confirm('http://www.khoral.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.khoral.com/'" tppabs="http://www.khoral.com/">http://www.khoral.com</A></P>



<P>The demo was removed some months ago, but it is used here as an

example

and some other linux program protected with Flexlm, could be used.

Moreover,

you could try also with Windows NT versions (I encourage you not to do

it, even just for aesthetic reason :-).</P>



<TABLE BORDER=1 CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD bgcolor="#C6E7C6">

<CENTER><P><FONT COLOR="#0000FF"><FONT SIZE=+2>Tools

Update</FONT></FONT></P></CENTER>

</TD>

</TR>

</TABLE>



<P>There's a growing number of tools available for developing, but they

are quite specific and only a few of them are for general use. They

should

be know by you already, but for those of you <I>off the world</I> you

could

have a look to these variations of the known gdb:</P>



<P><B><U><A

HREF="javascript:if(confirm('http://www.gr.opengroup.org/java/jdk/linux/debug.htm  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.gr.opengroup.org/java/jdk/linux/debug.htm'" tppabs="http://www.gr.opengroup.org/java/jdk/linux/debug.htm">GDB 4.17</A> </U></B></P>



<P>This upgrade provides gdb multithread capabilites, that until this

version

had no support at all.</P>



<P><B><U><A

HREF="javascript:if(confirm('http://hegel.ittc.ukans.edu/projects/smartgdb/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://hegel.ittc.ukans.edu/projects/smartgdb/'" tppabs="http://hegel.ittc.ukans.edu/projects/smartgdb/">SMARTGDB 0.9</A></U></B></P>



<P>I must admit the idea of smartgdb developers is really interesting,

but i have to warn you too, that it still needs a lot of work for not

disappointing

you when you try to use it. The main improvements are firstly the

multithread

support, and secondly and more important, it carries a Tcl/Tk

interpreter

that allows you to write code that ameliorates the interface the way you

want. Moreover, it gives you the chance to write procedures that take

care

of breakpoints.</P>



<TABLE BORDER=1 CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD bgcolor="#C6E7C6">

<CENTER><P><FONT COLOR="#0000FF"><FONT

SIZE=+2>Essay</FONT></FONT></P></CENTER>

</TD>

</TR>

</TABLE>



<P>After cracking with ltrace XPrismPro, i was really interested in some

of the internals of the comercial protection used: FlexLm (Flexible

License

Manager). Probably many of you know it, many hardware cad tools use that

crap, and you find it no matter you run Solaris or Windows NT (sorry for

the last ones). XPrismpro (hey don't look, they removed the demo time

ago

!), carried a complete user manual of Flexlm, well that's nice for

motivation,

but there were a lot of questions unanswered. The main details available

in the user's manual are (excerpt from flexlm user's manual): </P>



<OL>

<LI>The license module in the client application finds the license file,

which includes the host name of the license server node and port number

of the license manager daemon, lmgrd. </LI>



<LI>The client establishes a connection with the license manager daemon

(lmgrd) and tells it what vendor daemon it needs to talk to. </LI>



<LI>lmgrd determines which machine and port correspond to the master

vendor

daemon and sends that information back to the client. </LI>



<LI>The client establishes a connection with the specified vendor daemon

and sends its request or a license. </LI>



<LI>The vendor daemon checks in its memory to see if any licenses are

available

and sends a grant or denial back to the client. </LI>



<LI>The license module in the application grants or denies use of the

feature,

as appropriate. </LI>

</OL>



<P>I must add that the license file, a text file, contains a key (ten

bytes

i think) that authenticates the license. This license file and the

vendor

daemon must be provided by the software company that sells you the

program.

This is an exaple of license file (censored :-). </P>



<P><FONT FACE="Courier New"><FONT SIZE=-1>SERVER localhost.localdomain

ANY <BR>

VENDOR khoral /usr/local/flexlm/v6.0/i86_l1/khoral <BR>

FEATURE xprismpro khoral 1.0 permanent 4 XXXXXXXXXXXX </FONT></FONT></P>



<P>I must admit i don't find the coherence. Do flexlm guys really think

that network administrators are so worried with the lincensed/unlicensed

software that the people run ? Is the access granted by the server, by

the local license file, or by both ? I just can think the license server

is located inside vendor's network, i mean, imagine i buy some crap to

Adobe, and then everytime i run it, it connects with Adobe and grant me

access. But that is fucking unflexible :-) !!!. In that case i was

thinking

it could not be so hard to make a fake server that grants access

everytime.

</P>



<P>Anyway, after reading that i had to visit flexlm web site and look

for

some enlightenment: </P>



<P><A href="javascript:if(confirm('http://www.globetrotter.com/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.globetrotter.com/'" tppabs="http://www.globetrotter.com/">http://www.globetrotter.com</A> </P>



<P>:-), firstly you can read there a ton of comercial shit about stop

piracy,

improve your sales and so on. Go to Flexlm product, and there is

available

an evaluation programmer's kit. Do you think flexlm programmer's kit is

protected with flexlm :-DDDD ??? NO, of course, not. BTW, you can get

that

programmers kit from some mirrors (do ftpsearch, and look for

install_flexlm.ftp).

</P>



<P>Two of the files are provided encrypted, and of course you must begg

for the key or start some reversing. A program is given to decrypt, and

it nicely tells you if the code is wrong and what is the format of the

code: </P>



<PRE><FONT SIZE=-1>xxxx-xxxx-xxxx-xxxx-xx or 

                 xxxx-xxxx-xxxx-xxxx-xxx or 

                 nnnn-xxxx-xxxx-xxxx-xxxx-xx </FONT></PRE>



<P>One of the features of the decryption program is to provide the key

in a text file. Perfect, don't forget it. </P>



<P>Run ltrace, of course, and you'll see that when you introduce a

number

in the format above, the last number (two or three ciphers) is converted

to long (atol function) and the error message is constructed. Dasm the

file and you'll see that the value returned by the function atol is

compared

with 0x100 (256), and you're fired if the value is greater. Then when

you

introduce the right format and the last number is less than 256, you

receive

a different error message. Looking at the new ltrace output, woowww,

there's

a call to sprintf that generates a string like xxxx-xxxx-xxxx-xxxx,

hmmm,

interesting. Now if you put this number you got from sprintf and keep

the

last number untouched, you'll get a good decryption key, but not good

for

the specific files. Fortunately, that sprintf is the only one present in

the whole log. </P>



<P>The last task is to get the specific decryption key for flexlm files.

I decided to use a funny approach and write a perl script that </P>



<OL>

<LI>calls the decryption program through ltrace. Last number among

[0-99]

</LI>



<LI>reads ltrace's log and builds a good key. Store it in a file and

repeat.

</LI>



<LI>once you get all the good keys, extract the first one, put it in a

file and check if it can decrypt flexlm files. </LI>



<LI>if not, just try the next </LI>

</OL>



<P>in a few seconds you'll get the good decryption key that i'll not

give

you, but you can easily get with the power of perl :-). </P>



<P>Once you get the programmers kit (evaluation) available, let's start

reading the manual, written in good html. I'll not punish you with the

gory details but the conclusion i got was, how could it be patented ???

All the supposed security of the flexlm is based in keeping the methods

secret. That is absurd, anyone could get this kit and you'll see how

vendors

are giving away in their daemons (or in their client programs) the

information

needed to build a license generator. The programmer's guide just gives

you some clues of the encryption process, and some of the functions of

Flexlm API (the ones used in the source code examples provided). </P>



<P>Now let's go to setup the whole thing and run an installation script.

It will ask you the vendor daemon name, a pair of 8 bytes encryption

seeds

that MUST BE KEPT SECRET as they are the ones that are unique to your

software,

and 5 vendor keys supposedly provided by Flexlm guys. Of course, i had

not that vendor keys. The script starts to compile your new daemon, but

at the end you receive a message that the vendor keys provided are

invalid

or so. </P>



<P>If you now look at the Makefile and the software provided, this is a

summary of what they supply in this kit: </P>



<OL>

<LI>License manager: lmgrd </LI>



<LI>Source examples for daemon and client program </LI>



<LI>Some utilities to test lmgrd, build licenses and so on. </LI>



<LI>Three libraries that must be linked and that contain Flexlm API,

server

and client side. </LI>



<LI>Source code for the license generator: <FONT

COLOR="#008000">lmcrypt</FONT>

(remeber that name) </LI>

</OL>



<P>The last one is really surprising at the first glance, but as the

interesting

routines are in the libraries it's not that easy. Anyway it's impossible

not to run lmcrypt just the second you see it. Run it and you'll get the

stupid message about the vendor keys. Most of the compiled programs

showed

the same behaviour, so it is neccessary to: </P>



<UL>

<LI>Build valid vendor keys. </LI>



<LI>Patch a little bit. </LI>

</UL>



<P>May be any of you like the first option, i find it particularly

boring.

Hey, hey, one moment, that's what Flexlm guys says about the security of

their product: </P>



<P>---------------------------------------------------------- Keeping

Your

Software Secure </P>



<P>No software is completely secure. FLEXlm is no exception. While

GLOBEtrotter

Software has made every effort to ensure the integrity of FLEXlm, all

points

of attack can never be anticipated. The following lists known points of

vulnerability in FLEXlm in increasing order of difficulty to break.

Globetrotter

Software also maintains a list of techniques for making your

implementation

more secure - please contact technical support (<A href="javascript:if(confirm('http://129.105.116.5/fravia/py/nfCmp.py-Pyt=Tnf&1st=1&to=support@globes.com&YY=17604  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://129.105.116.5/fravia/py/nfCmp.py-Pyt=Tnf&1st=1&to=support@globes.com&YY=17604'" tppabs="http://129.105.116.5/fravia/py/nfCmp.py-Pyt=Tnf&1st=1&to=support@globes.com&YY=17604">support@globes.com</A>) for

a description of these techniques. </P>



<P><I>Easy</I> </P>



<P>Running the debugger on the application code if it is released with

unstripped executables (on Unix) or as a debug version (on Windows).

</P>



<P><I>Difficult, depending on application policy </I></P>



<P>Killing the daemons, since a majority of daemons must be up in order

for anything to run, and a dead daemon is detected within the timer

interval

in a client. If, however, you do not use one of the built-in timers and

you do not call HEARTBEAT(), then your software protection could be

bypassed

by someone who kills the daemons each time that the application reaches

the maximum license limit, as the applications would never detect that

the daemon went down. </P>



<P><I>Very Difficul</I>t </P>



<P><B>Guessing</B> the license keys that belong in the license file.

FLEXlm's

standard authentication algorithm takes the user-visible data fields

(number

of licenses, expiration date, version number, vendor-defined string,

feature

name, host IDs of all servers, plus any optional authenticated fields)

and combines them with the vendor's private encryption seeds to produce

a license key. The algorithm used is a proprietary one-way block

chaining

encypherment of all the input data.</P>



<P><B>Writing</B> a new daemon that emulates your vendor daemon. FLEXlm

encrypts the traffic between client and vendor daemon to make this point

of attack much more difficult. </P>



<P><B>Running</B> the debugger on a stripped (Unix) or a non-debug

(Windows)

executable. This requires someone to find the FLEXlm calls without any

symbol table knowledge. </P>



<P>-------------------------------------------- At the end of the essay

you may set your own ratios :-). </P>



<P>I like this facility of english language to put qualifiers one after

the other, even though is widely used in commercial stuff. Watch the

pseudo-sophistication

that it provides:</P>



<P><I>&quot;The algorithm used is a proprietary one-way block chaining

encypherment ...&quot;</I></P>



<P>Back to the cracking, if you see the <U>source</U> code of lmcrypt.c,

the error message is caused by a call to the function lc_init: </P>



<P><FONT FACE="Courier New"><FONT SIZE=-1>status = <FONT

COLOR="#0000FF">lc_init</FONT>(prevjob,

VENDOR_NAME, &amp;code, &amp;job); </FONT></FONT></P>



<P>if the function doesn't return 0, you know, beggar off. I felt really

dissappointed patching the source code, so let's go back to our

libraries

and look for a global solution. There are three: </P>



<PRE><FONT SIZE=-1>liblmgr.a

                 liblmgr_as.a

                 liblmgr_s.a</FONT></PRE>



<P>Usually you find two types of libraries: <B>.a</B> libraries (static)

and <B>.so</B> (dynamic). So in this case there's a collection of static

libraries that are statically linked to your code. How they are made?

Well,

very simple these files are just &quot;<B>ar</B>&quot; archives (similar

to tar archives), and inside them there's a collection of object (.o)

files.

With &quot;<B>ar</B>&quot; command you may extract files, add, and so

on.

The syntax is the same of the tar command. There's also a very useful

command

for investigating the contents of a library: <B>nm</B>. This command

gives

you information about how is organized the library's functions and

variables.

This is just some interesting part of running nm libmgr.a </P>



<PRE><FONT SIZE=-1>lm_init.o: 

                 00000000 d VERSION

                          U calloc

                          U errno

                 00000004 d first

                 00000000 t gcc2_compiled.

                          U getenv

                          U l_getattr

                          U l_getattr_init

                          U l_malloc

                          U l_more_featdata

                 00000014 D l_n36_buff

                          U l_set_error

                          U l_sg

                 00000af0 T lc_first_job

                          U lc_get_attr

                 00000000 T lc_init

                 00000b10 T lc_next_job

                          U lc_set_attr

                 00000008 D lm_bpi

                 0000000c D lm_max_masks

                 00000010 D lm_nofile

                          U localtime

                 </FONT> </PRE>



<P>the numbers on the right is the location of the data or the function

inside the object code file. If it is empty then the symbol was declared

as external. So here we can see that the code of <FONT

COLOR="#0000FF">lc_init

</FONT>is inside file lm_init.o. You know what to do, extract lm_init.o,

patch the code in a way <FONT COLOR="#0000FF">lc_init</FONT> returns

always

0 and then replace the old lm_init.o in the library, with your patched

file. This way if you rebuild all the programs, they will give you no

problems

with the vendor keys (at least less :-). </P>



<P>Now<FONT COLOR="#008000"> lmcrypt</FONT> runs fine. It gets a

just-made

license file as the input (the checksum key must be equal to 0), and

gets

out a perfect valid license file. My very first idea was to crack the

daemon

in order to grant access always, so i realized debuggin a daemon (memory

resident) program could be too hard without ltrace. The problem is that,

although may be supported in the future, now ltrace doesn't log calls to

functions inside the executable (even if they are available in the

symbol

table), and all the cool functions from the API are statically linked.

What i tried next, was to make them dynamically linked. I know that

needs

an explanation, ok. </P>



<P>We've got three libraries full of object files, now if you extract

those

object files in a directory and then use gcc (C compiler if you don't,

but should, know) to create a shared <B>.so</B> library, it could be

possible

to recompile the programs, indicating the compiler to link dynamically

to the new <B>.so</B> library. I was not quite sure that it would work,

but in about an hour i had my brand new version of <FONT

COLOR="#008000">lmcrypt</FONT>

dynamically linked. The command line for creating shared libraries is

something

like this: </P>



<P>gcc -shared -Wl,-soname,libflex.so.1 -o libflex.so.1.0 *.o </P>



<P>if you want to repeat this process, i got two unresolved references

that have to be solved: </P>



<OL>

<LI>Add an aditional object file lm_new.o that is compiled when you

build

the whole crap. </LI>



<LI>Before creating the .so library remove lm_sapi.o file. </LI>

</OL>



<P>If you don't want problems, put the library in /usr/local/lib for

instance,

run ldconfig and it's ready to be used: </P>



<P>gcc -o <FONT COLOR="#008000">lmcrypt</FONT> lmcrypt.c -lflex </P>



<P>As you'll know soon, i got nothing with all this, but i'm telling you

because i got a really good time with the process (the best of the whole

crack) and may be useful for you in the future.</P>



<P>Anyway, like it was quite successful, i repeated the process

compiling

the daemon. It was not so hard and i got a dynamically linked daemon,

but

soon i realized i could not use ltrace with it for two reasons: </P>



<UL>

<LI>Ltrace analyzes an ELF file and log the calls made to dynamic

functions

declared in the ELF file. So the functions called from functions in the

library ( a function in a library calls another one in a library), are

not logged. In my daemon, even the main function was taken from the

library

created (libflex.so.1), then nothing could be logged. You dig it ? The

solution was to leave some of the &quot;important&quot; object files

outside

the dynamic library and link them statically, but it was getting really

meshy. </LI>

</UL>



<UL>

<LI>The daemon cannot be started directly. Is the license manager lmgrd,

the one that starts the daemon (via an exec system call). Ltrace has

some

problems logging child processes and that was the case. Later i

discovered

that you may start the daemon by yourself, you just need to give it the

appropiate (and not obvious) commmand line. </LI>

</UL>



<P>I finally decided to build my fat statically linked daemon. When you

run it, it gives you a message about vendor keys don't support daemon

mode

and then it shows your vendorkey1, vendorkey2, vendorkey3 and

vendorkey4.

I forgot to tell you the evaluation kit had the limitation that it

didn't

support daemon mode. I patched the file, and i received a message about

my vendor keys were over. I patched it too and then, i got no message

but

my deamon died when it was booting, creating a segmentation fault. In

that

case a &quot;core&quot; file is generated and can be debugged with gdb

( i just got there the command line for the daemon). </P>



<P>Ok, may be the vendor keys are necessary ... Then i got the daemon

provided

by khoral guys from XPrismPro and it booted with no error. Ok, why don't

getting khoral vendor keys ???? </P>



<P>Now is the moment to give the information about the encryption

process

and some data structure used by the software. The supposed process is:

</P>



<P>a) for running the software, you get vendor keys 1,2,3,4 and 5. </P>



<P>b) <FONT COLOR="#008000">lmcrypt</FONT><FONT COLOR="#408080">

</FONT>creates

the license. For the job it uses your PERSONAL AND SUPERSECRET

encryption

seed1 and seed2. </P>



<P>c) the daemon checks the encryption using encryption seed1 and seed2

xored with vendorkey5, to keep them secret and improve security :-DDDDD.

</P>



<PRE><FONT SIZE=-1>typedef struct  {

                                             short type;   

                                             unsigned long data[2];

                                             unsigned long keys[4]; 

                                             short flexlm_version;

                                             short flexlm_revision;

                                             char flexlm_patch[2];

                                             char

behavior_ver[LM_MAX_BEH_VER + 1];

                                           } codes;

</FONT>                 </PRE>



<P>where &quot;data&quot; array keeps encryption seeds (xored with

vendorkey5),

and &quot;key&quot; array keeps vendorkeys1,2,3 and 4. If you go back to

the definition of function <FONT COLOR="#0000FF">lc_init</FONT>, a

pointer

to a structure like this is passed to the function. </P>



<P>You'll notice that vendorkey5 is not present in the data structure,

you can do a binary search in the daemon and it is no present as a

redable

data. It's quite easy to run DDD and in the call to <FONT

COLOR="#0000FF">lc_init</FONT>,

for instance, read khoral vendor keys1,key2,key3,key4, xored_seed1 and

xored_seed2. All of them are carried in a the structure declared above.

</P>



<P>I tried to use those vendor keys (and make up the five one :-)

building

my home daemon, but the performance was the same i obtained with my

patching:

the daemon dies with no error message. Ok, let's admit that the

evaluation

kit doesn't support daemon mode (or at least is not too obvious to fool

it). Well let's concentrate now in the license generation. </P>



<P>What <FONT COLOR="#008000">lmcrypt</FONT> finally does is to call the

function lc_cryptstr </P>



<P><FONT FACE="Courier New"><FONT SIZE=-1>int lc_cryptstr(job, str,

return_str,

code, flag, filename, errors) </FONT></FONT></P>



<P>that takes the text line of the license with the sensitive

information

(and the checksum key=0) and replaces the checksum key with the good

value.

The parameter &quot;code&quot;, is the structure that we saw before, BUT

seed1 and seed2 have been previously unxored, i.e., the original value

of seed1 and seed2. Vendorkey5 is available to the program <FONT

COLOR="#008000">lmcrypt,</FONT>

so the unxoring is no mistery. The difference is that vendorkey5 is not

provided to the daemon that checks the license to be good or bad. </P>



<P>To be honest i didn't believe such an algorithm that takes the

ckecksum

and says if it's good or bad without generating it again. Obviously

vendorkey5

should be hidden somehow in the code ( i made some tests and vendorkey5

was not introduced in the code of the daemon ). It was a little bit

tricky,

but either way as vendorkey5 is a 4 bytes value, a brute force attack

would

not be so hard and the system would be quite unsecure. </P>



<P>Of course, my home daemon had a perfect symbol table, and the

function

used by <FONT COLOR="#008000">lmcrypt</FONT> (lc_cryptstr) was not used.

It would be too obvious. Reading the documentation of lc_cryptstr,

Globber

guys says that function is an easier choice than using directly

lc_crypt,

a function that is not documented BTW. The declaration is something

like:

</P>



<P><FONT FACE="Courier New"><FONT SIZE=-1>lc_crypt (no_care, no_care,

no_care,

code); </FONT></FONT></P>



<P>code ? quite interesting. Let's look at the assembly listing of the

daemon, read it backwords: ( i worked most of the time with khoral

daemon,

the one with the intersting seeds and no symbols, but it's more

educational

if you see the symbol names :-) </P>



<PRE>0806428a <LS_do_borrow+72a> leal   0xfffff7b4(%ebp),%eax

08064290 <LS_do_borrow+730> pushl  %eax;   <CODE "parameter.class" 

08064291 <ls_do_borrow+731> pushl  $0x0;   <PARAMTER for

l_bin_date



Reference to function : l_bin_date



08064293 <ls_do_borrow+733> call   08078710

08064298 <LS_do_borrow+738> addl   $0x4,%esp

0806429b <LS_do_borrow+73b> movl   %eax,%eax

0806429d <LS_do_borrow+73d> pushl  %eax;    <NO care parameter3

0806429e <ls_do_borrow+73e> movl   0x10(%ebp),%eax

080642a1 <LS_do_borrow+741> pushl  %eax;    <NO care parameter2

080642a2 <ls_do_borrow+742> movl   0x80aebac,%eax

080642a7 <LS_do_borrow+747> pushl  %eax;    <NO care parameter1



Reference to function : lc_crypt



080642a8 <ls_do_borrow+748> call   0808c0a0 <CALLING

lc_crypt </PRE>



080642ad <LS_do_borrow+74d> addl   $0x10,%esp

</PRE>



<P>then the parameter comes from a local variable, let's see now the

whole

routine:</P>



<PRE><FONT SIZE=-1>Reference to function : l_svk



0806423b <LS_do_borrow+6db> call   08087e30 

08064240 <LS_do_borrow+6e0> addl   $0x8,%esp

08064243 <LS_do_borrow+6e3> movl   %eax,%eax

08064245 <LS_do_borrow+6e5> movl   %eax,local_A; <THE returned value

0806424b <ls_do_borrow+6eb> pushl  $0x28;     <SIZE of structure

0806424d <ls_do_borrow+6ed> movl   0x80ae910,%eax; <POINTER to &quot;code&quot; structure

08064252 <ls_do_borrow+6f2> pushl  %eax

08064253 <LS_do_borrow+6f3> leal   local_B,%eax

08064259 <LS_do_borrow+6f9> pushl  %eax



Reference to function : memcpy  <COPY code "structure.class" to local_2



0806425a <ls_do_borrow+6fa> call   0804977c

0806425f <LS_do_borrow+6ff> addl   $0xc,%esp

08064262 <LS_do_borrow+702> movl   0x80ae910,%eax; <POINTER to code "struc.class" 

08064267 <ls_do_borrow+707> movl   0x4(%eax),%ecx; <LOAD seed1

0806426a <ls_do_borrow+70a> xorl   local_A,%ecx;   <SOME xoring

08064270 <ls_do_borrow+710> movl   %ecx,local_B+4; <UPDATE seed1

08064276 <ls_do_borrow+716> movl   0x80ae910,%eax; <POINTER to code "struc.class" 

0806427b <ls_do_borrow+71b> movl   0x8(%eax),%ecx; <LOAD seed2

0806427e <ls_do_borrow+71e> xorl   local_A,%ecx;   <MORE xoring

08064284 <ls_do_borrow+724> movl   %ecx,local_B+8; <UPDATE seed2

0806428a <ls_do_borrow+72a> leal   local_B,%eax;   <CORRECTED code

08064290 <ls_do_borrow+730> pushl  %eax;   <OUR parameter

08064291 <ls_do_borrow+731> pushl  $0x0



Reference to function : l_bin_date



08064293 <LS_do_borrow+733> call   08078710 

08064298 <LS_do_borrow+738> addl   $0x4,%esp

0806429b <LS_do_borrow+73b> movl   %eax,%eax

0806429d <LS_do_borrow+73d> pushl  %eax

0806429e <LS_do_borrow+73e> movl   0x10(%ebp),%eax

080642a1 <LS_do_borrow+741> pushl  %eax

080642a2 <LS_do_borrow+742> movl   0x80aebac,%eax

080642a7 <LS_do_borrow+747> pushl  %eax



Reference to function : lc_crypt



080642a8 <LS_do_borrow+748> call   0808c0a0 <LC_crypt>

080642ad <LS_do_borrow+74d> addl   $0x10,%esp

</FONT>                 </PRE>



<P>I put again the code structure to ease the analysis: </P>



<PRE><FONT SIZE=-1>typedef struct  {

                           short type;

                           unsigned long data[2];

                           unsigned long keys[4];

                           short flexlm_version;

                           short flexlm_revision;

                           char flexlm_patch[2];

                           char behavior_ver[LM_MAX_BEH_VER + 1];

                         } codes;

</FONT>                 </PRE>



<P>OK, so vendorkey5 is supplied by a call to function l_svk (of course,

not documented) </P>



<P>int l_svk(char*,codes*) </P>



<P>And my dear friends, the first parameter is the daemon name !!! I

didn't

analysed it deeply, but apparently the function uses vendorkeys2 and 3,

together with vendor name, and builds on the fly vendorkey5, used to

unxor

seed1 and seed2. </P>



<P>Now we get all the data to rebuild the whole crap, and build all

kind,

types, sort of licenses, server redundants, node locked, permanent,

blah,

blah. HEY COMPANIES FROM THE WORLD, THIS IS YOUR SECURITY !!! I don't

understand

quite well what does a company as Lockeed Martin using Flexlm. Once you

know the process, it's quite easy to look at function signatures and

locate

the sensible functions quickly. The whole security is based on secrecy,

and that uses to be no security. </P>



<P>The license generation works perfectly if you want to try it. Anyway

my doubts about the whole crap remains. Apparently XPrismPro doesn't use

the daemon thing at all. Turn it on, turn it off, it only needs the

license

file, so i'll gotta wait to test the daemon weakness ( or not ). If

anyone

understands perfectly the daemon working, please tell me. What now I

grasp

it's that the idea is to spread n (identic) licenses in a company, and

you can use just m (m<N) at the same time, so the license server

                 grant

                 access depending on wether or not m<n. The information

for

                 "m"

                 is got from the license that has to be located in the

local host and the

                 server too.</P>

</P>



<P>That's all folks !!!</P>



<P>--------------------------------------------------------</P>



<P>Because people use to ask it to me, i repeat here the code for dasm,

but IT WAS AVAILABLE IN OLD ESSAYS TOO !</P>



<P><A NAME="DASM"></A></P>



<PRE><FONT SIZE=-1>#!/usr/bin/perl

;############ MODIFY THIS LINE WITH YOUR PERL LOCATION ############

push(@INC,&quot;/usr/lib/perl5&quot;);

require(&quot;flush.pl&quot;);





;##################################################################

;######## LINUX DISASSEMBLER 2.01

;######## (C) SiuL+Hacky Aug 1998

;######## You may copy, modify, distribute this program and

;######## is up you to keep this header here

;######## Usage: dasm exe_file dasm_file

;##################################################################





$f_input=$ARGV[0];

$f_output=$ARGV[1];

&amp;printflush(STDOUT, &quot;\nCreating disassembled file ...&quot;);

$return=system(&quot;objdump -d -T -x --prefix-addresses

&quot;.$f_input.&quot;>&quot;.$f_output.&quot;2&quot;);

if ($return!=0){

  print &quot;\nERROR OPENING OBJDUMP $return&quot;;

  print &quot;\nUsage: dasm exe_file dasm_file&quot;;

  print &quot;\nBe sure to get objdump in your path. Check also file

permissions\n&quot;;

  exit(1);

 }



open(INPUT, &quot;<QUOT;.$f_output.&quot;2&quot;);



&amp;printflush(STDOUT, &quot;\nReading strings ...&quot;);

$_=<INPUT>;

while (!/.rodata/){

  $_=<INPUT>;

}

($rubbish, $rest)=split(/.rodata/,$_,2);

($rubbish, $rest)=split(/0/,$rest,2);

@numbers=split(/  /,$rest,5);

$size=hex($numbers[0]);

$starting_address=hex($numbers[1]);

$end_address=$starting_address+$size;

$offset=hex($numbers[3]);

open(CODIGO, &quot;<QUOT;.$f_input);

seek(CODIGO,$offset,0);

read(CODIGO,$cadena,$size);

close(CODIGO);





$_=<INPUT>;

while (!/SYMBOL TABLE/){

  $_=<INPUT>;

}

&amp;printflush(STDOUT, &quot;\nProcessing symbol table ...&quot;);

$_=<INPUT>;

while (!/^\n/){

 @st_element=split(/ /, $_);

 $_=$st_element[$#st_element];

 chop;

 $symbol_table{$st_element[0]}=$_;

 $_=<INPUT>;

}





while (!/\.text/){

  $_=<INPUT>;

}

&amp;printflush(STDOUT,  &quot;\nProcessing jmps and calls ...&quot;);



######### the regex gets rid of possible line information #############





while (<INPUT>){

  $_=~ s/<//G;

  $_=~s/  / /g;

  if (/j/){

    ($direccion,$inst,$destino)=split(/ /,$_,3);

    $destino=~s/ //g;

    chomp($destino);

    $salto{$destino}.=($direccion.&quot; \; &quot;);

  }

  elsif (/call/){

    ($direccion,$inst,$destino)=split(/ /,$_,3);

    $destino=~s/ //g;

    chomp($destino);

    $call{$destino}.=($direccion.&quot; \; &quot;);

  }

}



seek(INPUT,0,0);

&amp;printflush(STDOUT, &quot;\nWritting references ...\n&quot;);

open(OUTPUT, &quot;>&quot;.$f_output) || die print &quot;\nError

opening write file\n&quot;;

print OUTPUT &quot;FILE REFERENCED\n\n&quot;;



while (!/Disassembly of section .text:/){

 $_=<INPUT>;

 print OUTPUT;

}

$char=&quot;.&quot;;

$counter=0;

while(<INPUT>){

 $counter++;

 if ( ($counter % 400)==0){

   printflush(STDOUT,$char);

   if ( ($counter % 4000)==0){

     printflush(STDOUT,&quot;\r&quot;);

     if ($char eq &quot;.&quot;){ $char=&quot; &quot;;}

     else { $char=&quot;.&quot;;}

   }  

 }

 $copia=$_;

 $_=~s/<//GE;

 $_=~s/  / /g;

 ($direccion, $inst, $destino)=split(/ /,$_,3);

 if ( defined( $symbol_table{$direccion} )){

   print OUTPUT &quot;\n&quot;;

   print OUTPUT &quot;---- Function :

&quot;.$symbol_table{$direccion}.&quot; ----\n&quot;;

 }

 if (/call/){

   $destino=~s/ //g;

   chomp($destino);

   if ( defined( $symbol_table{$destino} )){

     print OUTPUT &quot;\n&quot;;

     print OUTPUT &quot;Reference to function :

&quot;.$symbol_table{$destino}.&quot;\n\n&quot;;

   }

 }  

 if ( defined( $salto{$direccion} )){

   print OUTPUT &quot;\n&quot;;

   print OUTPUT &quot;Referenced from jump at

&quot;.$salto{$direccion}.&quot;\n\n&quot;;

 }

 if ( defined( $call{$direccion} )){

   print OUTPUT &quot;\n&quot;;

   print OUTPUT &quot;Referenced from call at

&quot;.$call{$direccion}.&quot;\n\n&quot;;

 }

 if (/\$/){

        ($instruccion, $operand)=split(/\$/,$_,2);

        if (!/push/){

          ($operand, $rest)=split(/\,/,$operand,2);

        }

        chomp($operand);

        $offset=hex($operand);

        if ( ($offset <= $end_address) &amp;&amp; ($offset >=

$starting_address ) ){

          $auxiliar=substr($cadena, $offset-$starting_address);

          $length=index($auxiliar, pack(&quot;x&quot;) );

          $auxiliar=substr($auxiliar, 0, $length);       

          $auxiliar=~s/\n//g;

          print OUTPUT &quot;\n&quot;;

          print OUTPUT &quot;Possible reference to string:&quot;;

          print OUTPUT &quot;\n\&quot;$auxiliar\&quot;\n\n&quot;

        }       

  }

 print OUTPUT $copia;

}

close(INPUT);

close(OUTPUT);

print &quot;\n&quot;;

system(&quot;rm &quot;.$f_output.&quot;2&quot;);

</FONT>                 </PRE>



<TABLE BORDER=1 CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD bgcolor="#C6E7C6">

<CENTER><P><FONT COLOR="#0000FF"><FONT SIZE=+2>Final

Notes</FONT></FONT><BR>

</P></CENTER>

</TD>

</TR>

</TABLE>



<P><!-- PASTE HERE YOUR FINAL NOTES (if any) --></P>



<P>It's not my intention to harm any company that was fooled with this

system, so as you could see no ready to use crack was released. I just

wanted to show how poor is the protection scheme used in the license

generation.</P>



<TABLE BORDER=1 CELLSPACING=2 WIDTH="100%" HEIGHT="45" >

<TR>

<TD bgcolor="#C6E7C6">

<CENTER><P><FONT COLOR="#0000FF"><FONT SIZE=+2>Ob Duh</FONT></FONT><BR>

</P></CENTER>

</TD>

</TR>

</TABLE>



<CENTER><P><I>I WILL bother explaining you that you should BUY this

target

program if you intend to use it for a longer period than the allowed

one.

Should you want to STEAL this software instead, you are a moron. This is

the kind of software that WE NEED. Many people should register it and

allow

its Author to write even more interesting stuff!</I> <!-- WAY OUT

                 STARTS HERE --></P></CENTER>



<P>

<HR></P>



<CENTER><P><I>You are deep inside fravia's page of reverse engineering,

choose your way out:</I> <BR>

</P></CENTER>



<CENTER><P>

<HR ALIGN=CENTER WIDTH=100% SIZE=3><!-- Begin  main mover --><FONT

SIZE=+2>Fravia's

main site</FONT> <BR>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="index.html" tppabs="http://www.anticrack.de/fravia/index.html">homepage</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="orc.htm" tppabs="http://www.anticrack.de/fravia/orc.htm">+ORC</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="noanon.htm" tppabs="http://www.anticrack.de/fravia/noanon.htm">anon</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="coumes.htm" tppabs="http://www.anticrack.de/fravia/coumes.htm">counter

measures</A> <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13

ALIGN=BOTTOM><A HREF="tools.htm" tppabs="http://www.anticrack.de/fravia/tools.htm">tools</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="academy.htm" tppabs="http://www.anticrack.de/fravia/academy.htm">+HCU

Academy</A> <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13

ALIGN=BOTTOM><A HREF="stalking.htm" tppabs="http://www.anticrack.de/fravia/stalking.htm">stalking</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="realicra.htm" tppabs="http://www.anticrack.de/fravia/realicra.htm">reality cracking</A>

<BR>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="student.htm" tppabs="http://www.anticrack.de/fravia/student.htm">students'

essays</A> <IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13

ALIGN=BOTTOM><A HREF="cocktail.htm" tppabs="http://www.anticrack.de/fravia/cocktail.htm">cocktails</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="links.htm" tppabs="http://www.anticrack.de/fravia/links.htm">links</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="searengi.htm" tppabs="http://www.anticrack.de/fravia/searengi.htm">search_forms</A>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="info.htm" tppabs="http://www.anticrack.de/fravia/info.htm">mail_fravia+</A>

<BR>

<IMG SRC="bulletr.gif" tppabs="http://www.anticrack.de/fravia/bulletr.gif" ALT="red" HEIGHT=13 WIDTH=13 ALIGN=BOTTOM><A

HREF="legal.htm" tppabs="http://www.anticrack.de/fravia/legal.htm">Is

reverse engineering legal?</A> <!-- End main mover --></P></CENTER>



</BODY>

</HTML>